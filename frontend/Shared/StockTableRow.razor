@using System.Threading
@inject ISymbolService SymbolService
@inject ILogger<StockTableRow> Logger
@inject NavigationManager NavigationManager

@if (SymbolData != null)
{
    <tr>
        <th>@Symbol</th>
        <th style="color: @(SymbolData.CurrentPrice >= _lastPrice ? "#1FB46C" : "#FA5E66");">@SymbolData.CurrentPrice.ToString("C")</th>
        <td>
            <a class="btn btn-primary" href="@($"stock/{Symbol}")">View</a>
        </td>
    </tr>
}

@code {
    [Parameter]
    public string Symbol { get; set; }

    public SymbolResponse SymbolData { get; set; }
    public CancellationTokenSource _tokenSource = new();
    private double _lastPrice = 0.00;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetStreamDataAsync();
        }
    }

    private async Task GetStreamDataAsync()
    {
        
        var stream = SymbolService.SymbolStream(new() { Symbol = Symbol }, _tokenSource.Token);
        await foreach (SymbolResponse response in stream)
        {
            _lastPrice = SymbolData?.CurrentPrice ?? 0.00;
            SymbolData = response;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private void OnLocationChange(object sender, LocationChangedEventArgs args)
    {
        _tokenSource.Cancel();
    }
}
