@page "/stock/{symbol?}"
@using System.Threading
@inject ISymbolService SymbolService
@inject ILogger<Stock> Logger
@inject NavigationManager NavigationManager

@if (SymbolData is not null)
{
    <h2>@SymbolData.Symbol</h2>
    <p style="color: @(SymbolData.CurrentPrice >= _lastPrice ? "#1FB46C" : "#FA5E66"); font-size: 2.5em;">@SymbolData.CurrentPrice.ToString("C")</p>
    <p>Updated: @(SymbolData.Updated.ToDateTime().ToString())</p>
}
<br />
<br />
@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <p style="color: red">@ErrorMessage</p>
    <button class="btn btn-primary" @onclick="(() => NavigationManager.NavigateTo(NavigationManager.Uri, true))">Reload</button>
}


@code {
#nullable enable
    [Parameter]
    public string? Symbol { get; set; }

    private CancellationTokenSource _tokenSource = new();
    public SymbolResponse SymbolData { get; set; }
    private string ErrorMessage { get; set; } = "";
    private double _lastPrice = 0.00;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            NavigationManager.LocationChanged += OnLocationChanged;
            await GetStreamDataAsync();
        }
    }

    private async Task GetStreamDataAsync()
    {
        try
        {
            var stream = SymbolService.SymbolStream(new() { Symbol = Symbol ?? "NOK" }, _tokenSource.Token);
            await foreach (SymbolResponse response in stream)
            {
                _lastPrice = SymbolData?.CurrentPrice ?? 0.00;
                SymbolData = response;
                Logger.LogInformation("Stream data received: {stk}:{price}", SymbolData.Symbol, SymbolData.CurrentPrice);
                await InvokeAsync(() => StateHasChanged());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
            ErrorMessage = ex.Message;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs? args)
    {
        _tokenSource.Cancel();
    }
}
